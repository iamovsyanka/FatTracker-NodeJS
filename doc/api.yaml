openapi: 3.0.0

info:
  title: FatTracker
  description: Postavte 8
  version: 1.1.1

servers:
  - url: /

tags:
  - name: auth
  - name: admin
  - name: user
  - name: category
  - name: day
  - name: product
  - name: meal

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string
        verified:
          type: boolean
        height:
          type: integer
        weight:
          type: integer
        role:
          type: string
        sex:
          type: string
        birthDay:
          type: string
        activity:
          type: number
        requiredCalories:
          type: number

    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string

    Day:
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
        totalCalories:
          type: number
        totalFats:
          type: number
        totalProtein:
          type: number
        totalCarbs:
          type: number

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  security:
    - bearerAuth: []
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

paths:
  /api/v1/user/getInfo:
    get:
      security:
        - bearerAuth: []
      tags:
        - user
      summary: Get user by id.
      description: Get information about user.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/v1/user/countCalories:
    get:
      security:
        - bearerAuth: []
      tags:
        - user
      summary: Get user by id.
      description: Get information about user.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: number
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/v1/user/updateInfo:
    put:
      security:
        - bearerAuth: []
      tags:
        - user
      summary: Edit profile.
      description: Edit profile.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                height:
                  type: integer
                  description: height
                weight:
                  type: integer
                  description: weight
                birthDay:
                  type: string
                  description: birthDay
                  pattern: '^\d{4}-\d{2}-\d{2}$'
                sex:
                  type: string
                  array: [men, women]
                  example: women
                activity:
                  type: number
                  array: [1.2, 1.37, 1.55, 1.7, 1.9]
                  exapmle: 1.55
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/v1/login:
    post:
      tags:
        - auth
      security:
        []
      summary: Login
      description: Logins a user and returns a JWT-token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                email:
                  type: string
                  description: email
                password:
                  type: string
                  description: Password
              required:
                - email
                - password
      responses:
        200:
          description: Successful login.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                description: JWT Token
        403:
          description: Incorrect email or password

  /api/v1/register:
    post:
      tags:
        - auth
      security:
        []
      summary: Registration
      description: Logins a user and returns a JWT-token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                email:
                  type: string
                  description: email
                name:
                  type: string
                  description: name
                password:
                  type: string
                  minLength: 5
                  description: Password
              required:
                - email
                - name
                - password
      responses:
        200:
          description: Successful register.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        403:
          description: Incorrect email or password

  /api/v1/category/allName:
    get:
      security:
        - bearerAuth: []
      tags:
        - category
      summary: Get names of all categories.
      description: Get names of all categories.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/v1/category/all:
    get:
      security:
        - bearerAuth: []
      tags:
        - category
      summary: Get all categories.
      description: Get all categories.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/v1/category/products:
    get:
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          description: The number of category to get products
      tags:
        - category
      summary: Get all names categories.
      description: Get all names categories.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/v1/day/getAllByUser:
    get:
      security:
        - bearerAuth: []
      tags:
        - day
      summary: Get all days.
      description: Get all days.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Day'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/v1/day/get:
    post:
      security:
        - bearerAuth: []
      tags:
        - day
      summary: Get day.
      description: Get day.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              properties:
                date:
                  type: string
                  pattern: '^\d{4}-\d{2}-\d{2}$'
                  description: date
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Day'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/v1/day/getSinceDate:
    post:
      security:
        - bearerAuth: []
      tags:
        - day
      summary: Get days since date.
      description: Get days since date.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                date:
                  type: string
                  pattern: '^\d{4}-\d{2}-\d{2}$'
                  description: date
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Day'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/v1/day/add:
    post:
      security:
        - bearerAuth: []
      tags:
        - day
      summary: Add day.
      description: Add day.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              properties:
                date:
                  type: string
                  pattern: '^\d{4}-\d{2}-\d{2}$'
                  description: date
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Day'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
